# # -*- coding: utf-8 -*-
# """SoftwareEngineeringProject.ipynb
#
# Automatically generated by Colaboratory.
#
# Original file is located at
#     https://colab.research.google.com/github/D4v321/MyAnimeBot/blob/main/SoftwareEngineeringProject.ipynb
#
# Mounting Procedure
# """
#
# """Set Paths
#
# """
#
# root_path = 'gdrive/MyDrive/SoftwareEngineering/'
# data_path =  root_path + 'Data/'
#
# """Imports"""
#
# import pandas as pd
#
# """Load Data
#
# """
#
# # df = pd.read_csv( data_path + 'animeReviewsOrderByTime.csv', sep=',', error_bad_lines=False)
# # df.columns
# #
# # for i in reversed(range(0,14,1)):
# #   df.reset_index(level=i, inplace=True)
# #
# # df.columns = ['id', 'workId', 'reviewId', 'workName', 'postTime', 'episodesSeen',
# #        'author', 'peopleFoundUseful', 'overallRating', 'storyRating',
# #        'animationRating', 'soundRating', 'characterRating', 'enjoymentRating',
# #        'review','1','2','3','4','5','6','7','8','9','10','11','12','13','14']
# # df.fillna('', inplace=True)
# #
# # df_review = df[['review','1','2','3','4','5','6','7','8','9','10','11','12','13','14']]
# # df_review['REVIEW'] = df_review['review'] + df_review['1'] + df_review['2'] +df_review['3'] +df_review['4'] +df_review['5'] +df_review['6'] +df_review['7'] +df_review['8'] +df_review['9'] +df_review['10'] +df_review['11'] +df_review['12'] +df_review['13'] +df_review['14']
# # df_review = df_review.drop(['review','1','2','3','4','5','6','7','8','9','10','11','12','13','14'], axis = 1)
# # df['review'] = df_review
# # df = df.drop(['1','2','3','4','5','6','7','8','9','10','11','12','13','14'], axis = 1)
# #
# # df
# #
# # print(df['review'][0])
#
# #@title Translate blabla
#
# # translate
# from translate import Translator
# # this tool is supposed to auto-detect the input language but it didn't work with some phrase,
# # so we decided to manually decides the translation and translated languages
#
# translator_nl = Translator(from_lang = "en", to_lang="nl") # translates phrase to dutch
# translator_en = Translator(from_lang = "nl", to_lang="en") # translates phrase to english
#
# # translation = translator_nl.translate("The last time I saw the sunlight during the semester was two years ago.")
# # print("From EN to NL:", translation)
# #
# # translation = translator_en.translate("Dit is een pen.")
# # print("From NL to EN:", translation)
#
# """Detect language of input to determine whether translation is necessary
#
# """
#
#
# from langdetect import detect
# from translate import Translator
#
# translator_nl = Translator(from_lang = "en", to_lang="nl") # translates phrase to dutch
# translator_en = Translator(from_lang = "nl", to_lang="en") # translates phrase to english
#
# #print(detect("Tell me what anime is good"))
# #print(detect("laat me wat anime zien"))
#
# def detect_and_translate_to_en(string):
#   lang = detect(string)
#   if lang == 'en':
#     return string
#   elif lang == 'nl' or lang == 'af':
#     string = translator_en.translate(string)
#     return string
#   else:
#      return "Input is of incompatible language"
#
# def translate_to_nl(string):
#     string = translator_nl.translate(string)
#     return string


from langdetect import detect as detect
from translate import Translator
from langdetect import DetectorFactory
from googletrans import *
DetectorFactory.seed = 0

translator = Translator()

def detect_language(input):
  lang = detect(input)
  if lang == 'en' or lang =='ca':
    lang = 'en'
    return lang
  if lang == 'nl' or lang == 'af':
    lang = 'nl'
    return lang
  else:
    return -1

def translate_input(input, lang):
    # translator_en = Translator(from_lang = "nl", to_lang="en") # translates phrase to english
    if lang == 'en' or lang =='ca':
      return input
    if lang == 'nl' or lang == 'af':
      input = translator.translate(input, dest='en', src = lang)
      return input.text
    else:
      return "Language not supported"

def translate_output(output, lang):
  if lang == 'en':   #input was in English, so leave output in English
    return output
  elif lang == 'nl':
    output_trans = translator.translate(str(output), dest='nl', src = 'en')
    return output_trans.text
  else:
    return "Language not supported"